#!/usr/bin/env ruby

require 'optparse'
require 'net/http'
require 'uri'
require 'json'
require 'rack'

options = {}

begin
    parser = OptionParser.new do |parser|
        parser.on("-s", "--status", "Check API status")
        parser.on("-p", "--price ID_VALUE", "Get current data of coin")

        parser.on("-h", "--help", "Prints this help") do
            puts parser
            exit
        end
    end
rescue OptionParser::ParseError
    puts "ERROR: Missing argument for the command"
end

parser.parse!(into: options)

base_url = "https://api.coingecko.com/api/v3"

options.keys.each do |key|
    base_url += "/ping" if key == :status

    if key == :price
        base_url += "/coins"
        base_url += "/#{options[:price]}"
    end
end

uri = URI(base_url)
#puts uri.to_s

#query = {
#  'coins' => options[:'coins']
#}.delete_if { |key, value| value.nil? }
#uri.query = Rack::Utils.build_query(query) unless query.empty?

response = Net::HTTP.get_response(uri).body
parsed_response = JSON.load(response)

price_change_percentage_1h_in_currency = parsed_response["market_data"]["price_change_percentage_1h_in_currency"]["usd"]
current_price = parsed_response["market_data"]["current_price"]["usd"]
price_change_1h_in_currency = current_price * price_change_percentage_1h_in_currency / 100
price_1h_in_currency = "%.2f" % (current_price + price_change_1h_in_currency)

puts "#{options[:price]} price\n--------------\n1 hour ago: USD ~#{price_1h_in_currency} \ncurrent price: USD #{current_price}" if options.has_key?(:price)

puts "OK" if options.has_key?(:status)